# LAB-11.2
66543206088-7 นายศุภกร ศิริเมืองมูล

#include <stdio.h>

void mergesort( int t[], int k ) ;
void merge( int *u, int m, int *v, int n, int *t ) ;

int main() {
 	int data[ 7 ] = { 4, 6, 1, 2, 5, 1, 8 } ;
 	int n = 7 ;
 	mergesort( data, n ) ;
 	for( int i = 0 ; i < n ; i++ ) printf( "%d ", data[ i ] ) ;
 	return 0 ;
}//end function

void merge( int *u, int m, int *v, int n, int *t ) {
    int i = 0, j = 0, k ;
    for ( k = 0; k < m + n; k++ ) {
        if ( i >= m ) {
            t[k] = v[j] ;
            j++ ;
        } else if ( j >= n ) {
            t[k] = u[i] ;
            i++ ;
        } else if ( u[i] < v[j] ) {
            t[k] = u[i] ;
            i++ ;
        } else {
            t[k] = v[j] ;
            j++ ;
        }//end if
    }//end for
}//end merge function

void mergesort( int T[], int n ) {
    if ( n > 1 ) {
        int mid = n / 2 ;
        int u[ mid ] ;
        int v[ n - mid ] ;
        
        for( int i = 0; i < mid; i++ ) {
            u[ i ] = T[ i ] ;
        }//end for

        for( int i = mid; i < n ; i++ ) {
            v[ i - mid ] = T[ i ] ;
        }//end for

        mergesort( u, mid ) ;
        mergesort( v, n - mid ) ;
        merge( u, mid, v, n - mid, T ) ;
    }//end if
}//end mergesort function
